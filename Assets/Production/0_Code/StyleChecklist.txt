Variables:
- Public variables use PascalCase
- Private variables use camelCase
- Any variable that's editable within the inspector has an initial value that is kept up to date with prefab settings. This is in case the variable name needs to change (the value would otherwise be lost fromt he inspector).
  - Note: You may not always be able to do this, and may not always make sense, as is the case with variables to store a prefab, but that's alright. Just try to save as much in-editor information as possible before attempting a variable name change.
- Organize variables that are visible to the inspector by groups:
    - Use the [Header] and [Space Attributes] as follows:
        - At the beginning of a logical group:
            - [Header("Title", order=#)]
            - [Space(5, order=#)] immediately after the header.
            - Use [Space(8, order=#)] if you want to create subgroupings under the same header.
        - At the end of a logical group:
            - [Space(10, order=#)]
        - This will make settings appear neatly organized and easy to parse through
- Mark variables that might be useful to debugging in the inspector, but not meant to be changed/tweaked with a [ReadOnly] attribute.
- Variables that are visible to the inspector (whether editable or not) should have a [Tooltip] attribute to explain what they actually are.
- Variables should use XML style documentation, with the <summary> tags on separate lines.
- Attributes applied to a variable should come after the documentation for the variable.
- Just because you'll want a variable to be editable in the inspector doesn't necessarily mean it should be public. Mark it private and add the [SerializeField] attribute if need be.

Method Names:
- All methods should declare an accessor.
- All methods are PascalCase, according to .NET specifications.
- Unity API methods (Update, FixedUpdate, OnCollision2D, OnTriggerEnter2D, etc) should always be private unless you're creating a class hierarchy, then make them protected.
- Methods should use XML style documentation, with the <summary> tags on separate lines.
- It's not necessary to give Unity API methods or constructors documentation, but it is necessary to write documentation within the method to help understand your intention for overriding the method.

Class Organization:
- Every class has a sufficiently detailed summary.
- 2 space tabs
- same line brackets (like God intended).
- Nothing should exist outside of a #region.
- Each class has the following regions (in order, if they exist):
    - Properties
    - Fields
        - Every [Header] attribute should be in its own #region, and the [Space(10)] attribute should come before the #endregion
    - Constructors
        - Banner/Region Title: Constructors
    - Unity API
        - Banner/Region Title: Unity API
    - Inherited/Patterned APIs (like the PlayerBehavior API)
    - Additional Public Interfaces
        - Banner/Region Title: Public Interface

Existing Banners (for ease of copy/paste):

    #region Properties
    //-------------------------------------------------------------------------
    // Properties
    //-------------------------------------------------------------------------

    #endregion



    #region Fields
    //-------------------------------------------------------------------------
    // Fields
    //-------------------------------------------------------------------------

    #endregion

    #region Input Ports
    //-------------------------------------------------------------------------
    // Input Ports
    //-------------------------------------------------------------------------

    #endregion

    #region Output Ports
    //-------------------------------------------------------------------------
    // Output Ports
    //-------------------------------------------------------------------------

    #endregion

    #region Constructors
    //-------------------------------------------------------------------------
    // Constructors
    //-------------------------------------------------------------------------

    #endregion



    #region Unity API
    //-------------------------------------------------------------------------
    // Unity API
    //-------------------------------------------------------------------------

    #endregion

    #region Dependency Injection
    //-------------------------------------------------------------------------
    // Dependency Injection
    //-------------------------------------------------------------------------

    #endregion

    #region Player Character API
    //-------------------------------------------------------------------------
    // Player Behavior API
    //-------------------------------------------------------------------------

    #endregion



    #region Collectible API
    //-------------------------------------------------------------------------
    // Collectible API
    //-------------------------------------------------------------------------

    #endregion



    #region Storable API
    //-------------------------------------------------------------------------
    // Storable API
    //-------------------------------------------------------------------------

    #endregion



    #region Interactible API
    //-------------------------------------------------------------------------
    // Interactible API
    //-------------------------------------------------------------------------

    #endregion

    #region Resetting API
    //-------------------------------------------------------------------------
    // Resetting API
    //-------------------------------------------------------------------------

    #endregion

    #region Public Interface
    //-------------------------------------------------------------------------
    // Public Interface
    //-------------------------------------------------------------------------

    #endregion

    #region Boss Interface
    //-------------------------------------------------------------------------
    // Boss Interface
    //-------------------------------------------------------------------------

    #endregion

    #region Auto Node API
    //-------------------------------------------------------------------------
    // Auto Node API
    //-------------------------------------------------------------------------

    #endregion

    #region Helper Methods
    //-------------------------------------------------------------------------
    // Helper Methods
    //-------------------------------------------------------------------------

    #endregion

    #region Odin Inspector Stuff
    //-------------------------------------------------------------------------
    // Odin Inspector
    //-------------------------------------------------------------------------
    
    #endregion